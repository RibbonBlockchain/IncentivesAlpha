{
  "schemaVersion": "2.0.0",
  "contractName": "Roles",
  "compilerOutput": {
    "abi": [],
    "evm": {
      "bytecode": {
        "linkReferences": {},
        "object": "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72305820554975aa2c0f20e967e7e56530a9de7abea4e73f1367bbf2594ff87c81eb77e564736f6c634300050a0032",
        "opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 JUMPI PUSH26 0x8F63D2E48DE1F1FC8F3F57578AC0B79F0173DB27989EBAD333F4 PUSH14 0x40A3EC64736F6C634300050C0032 ",
        "sourceMap": "108:873:0:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
      },
      "deployedBytecode": {
        "linkReferences": {},
        "object": "0x73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72305820554975aa2c0f20e967e7e56530a9de7abea4e73f1367bbf2594ff87c81eb77e564736f6c634300050a0032",
        "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 JUMPI PUSH26 0x8F63D2E48DE1F1FC8F3F57578AC0B79F0173DB27989EBAD333F4 PUSH14 0x40A3EC64736F6C634300050C0032 ",
        "sourceMap": "108:873:0:-;;;;;;;;"
      }
    }
  },
  "sources": {
    "Support/Roles.sol": {
      "id": 0
    }
  },
  "sourceCodes": {
    "Support/Roles.sol": "pragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n"
  },
  "sourceTreeHashHex": "0xb002c378d7b82a101bd659c341518953ca0919d342c0a400196982c0e7e7bcdb",
  "compiler": {
    "name": "solc",
    "version": "soljson-v0.5.12+commit.7709ece9.js",
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 999
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode.object",
            "evm.deployedBytecode.object"
          ]
        }
      },
      "remappings": []
    }
  },
  "networks": {}
}