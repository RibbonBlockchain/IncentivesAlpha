{
  "schemaVersion": "2.0.0",
  "contractName": "Math",
  "compilerOutput": {
    "abi": [],
    "evm": {
      "bytecode": {
        "linkReferences": {},
        "object": "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72305820cc7990c563b8becd65bf45443c7a07294083543524fe2f25da395c94515e4e0e64736f6c634300050a0032",
        "opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH32 0xAE65A9BA3E344FB464B66EA02180AF5D0D201FBCAF46933566397EA403F0D764 PUSH20 0x6F6C634300050C00320000000000000000000000 ",
        "sourceMap": "99:668:2:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
      },
      "deployedBytecode": {
        "linkReferences": {},
        "object": "0x73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72305820cc7990c563b8becd65bf45443c7a07294083543524fe2f25da395c94515e4e0e64736f6c634300050a0032",
        "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH32 0xAE65A9BA3E344FB464B66EA02180AF5D0D201FBCAF46933566397EA403F0D764 PUSH20 0x6F6C634300050C00320000000000000000000000 ",
        "sourceMap": "99:668:2:-;;;;;;;;"
      }
    }
  },
  "sources": {
    "Support/math/Math.sol": {
      "id": 2
    }
  },
  "sourceCodes": {
    "Support/math/Math.sol": "pragma solidity ^0.5.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
  },
  "sourceTreeHashHex": "0x4b5aa451e4e8801478708f94b118a7821c0500d676255eaf89fc78c14856ce4e",
  "compiler": {
    "name": "solc",
    "version": "soljson-v0.5.12+commit.7709ece9.js",
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 999
      },
      "outputSelection": {
        "*": {
          "*": ["abi", "evm.bytecode.object", "evm.deployedBytecode.object"]
        }
      },
      "remappings": []
    }
  },
  "networks": {}
}
