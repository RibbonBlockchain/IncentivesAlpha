{
  "contractName": "AccessControl",
  "abi": [
    {
      "inputs": [
        {
          "name": "_registry",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_switch",
          "type": "bool"
        }
      ],
      "name": "killSwitch",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_switch\",\"type\":\"bool\"}],\"name\":\"killSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"author\":\"@vonnie610 (GitHub)\\r\",\"details\":\"An interface for the access control contract\\r\",\"methods\":{\"killSwitch(bool)\":{\"details\":\"Allows the registry to hault all of the access controls\\r        functionality\\r\"}}},\"userdoc\":{\"methods\":{\"killSwitch(bool)\":{\"notice\":\"The bool _switch means that this hault is reversable. This \\r        function must be called in the admin contract, which will call\\r        the registry which will call this function. This was done for \\r        upgradability.\\r\"}}}},\"settings\":{\"compilationTarget\":{\"/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/AccessControl/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/AccessControl/AccessControl.sol\":{\"keccak256\":\"0x5987764922e867836ba2b0b5df14e54259c3705f017d5fc17401a0af2ee8def5\",\"urls\":[\"bzzr://f0ac274bd0b74dede66db3dd36c052ef825950504251f714e5113cb7e34d633c\"]},\"/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/AccessControl/IAccessControl.sol\":{\"keccak256\":\"0x635f1ba0a060315b0c84403eeb2019c6324bd9658e686089238b8a41bf020db3\",\"urls\":[\"bzzr://c0c1dfc00c0978b3ac8b50c0333f6cf511e9d4f8cf65f7f37909188fc9f96a23\"]},\"/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Registry/IRegistry.sol\":{\"keccak256\":\"0xd1f75d92542bcfffea18dfd1aefc560a70bcce5a8d5a5d151b0ad572a6cea163\",\"urls\":[\"bzzr://f6bb0c62b874b878631544b9940b8b1a62311161abf8b24dae0dd386919cc571\"]}},\"version\":1}",
  "bytecode": "0x608060405260016000806101000a81548160ff02191690831515021790555034801561002a57600080fd5b506040516020806102628339810180604052602081101561004a57600080fd5b810190808051906020019092919050505080600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506101b6806100ac6000396000f3fe608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806375283a0814610046575b600080fd5b34801561005257600080fd5b506100816004803603602081101561006957600080fd5b81019080803515159060200190929190505050610083565b005b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561016e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f46756e6374696f6e616c697479207265737472696374656420746f207265676981526020017f737472790000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b806000806101000a81548160ff0219169083151502179055505056fea165627a7a723058203efe691403a615679fc09ef9f1ff52496dce39e1f304b52998b6b457db0b197e0029",
  "deployedBytecode": "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806375283a0814610046575b600080fd5b34801561005257600080fd5b506100816004803603602081101561006957600080fd5b81019080803515159060200190929190505050610083565b005b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561016e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f46756e6374696f6e616c697479207265737472696374656420746f207265676981526020017f737472790000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b806000806101000a81548160ff0219169083151502179055505056fea165627a7a723058203efe691403a615679fc09ef9f1ff52496dce39e1f304b52998b6b457db0b197e0029",
  "sourceMap": "198:1240:0:-;;;271:4;248:27;;;;;;;;;;;;;;;;;;;;326:97;8:9:-1;5:2;;;30:1;27;20:12;5:2;326:97:0;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;326:97:0;;;;;;;;;;;;;;;;405:9;375:17;;:40;;;;;;;;;;;;;;;;;;326:97;198:1240;;;;;;",
  "deployedSourceMap": "198:1240:0:-;;;;;;;;;;;;;;;;;;;;;;;;1341:94;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1341:94:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1341:94:0;;;;;;;;;;;;;;;;;;;;;;;596:17;;;;;;;;;;;574:40;;:10;:40;;;552:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1420:7;1410;;:17;;;;;;;;;;;;;;;;;;1341:94;:::o",
  "source": "pragma solidity = 0.5.0;\r\n\r\nimport \"./IAccessControl.sol\";\r\nimport \"../Registry/IRegistry.sol\";\r\n\r\n/**\r\n  * @dev An interface for the access control contract\r\n  * @author @vonnie610 (GitHub)\r\n  */\r\ncontract AccessControl is IAccessControl {\r\n\r\n    bool private isAlive = true;\r\n    IRegistry private _registryContract;\r\n\r\n    constructor(address _registry) public {\r\n        _registryContract = IRegistry(_registry);\r\n    }\r\n    \r\n    /**\r\n      * @dev Only allows the register to call this function. \r\n      */\r\n    modifier onlyRegistry() {\r\n        require(\r\n            msg.sender == address(_registryContract), \r\n            \"Functionality restricted to registry\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev Ensures that this contracts functionality is only accessible when\r\n      *      the contract is alive.\r\n      */\r\n    modifier onlyAlive() {\r\n        require(isAlive, \"This contract has been killed\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev Allows the registry to hault all of the access controls\r\n      *         functionality\r\n      * @notice The bool _switch means that this hault is reversable. This \r\n      *         function must be called in the admin contract, which will call\r\n      *         the registry which will call this function. This was done for \r\n      *         upgradability.\r\n      */\r\n    function killSwitch(bool _switch) external onlyRegistry() {\r\n        isAlive = _switch;\r\n    }\r\n}",
  "sourcePath": "C:/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/AccessControl/AccessControl.sol",
  "ast": {
    "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/AccessControl/AccessControl.sol",
    "exportedSymbols": {
      "AccessControl": [
        58
      ]
    },
    "id": 59,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "=",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:0"
      },
      {
        "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/AccessControl/IAccessControl.sol",
        "file": "./IAccessControl.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 59,
        "sourceUnit": 67,
        "src": "28:30:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Registry/IRegistry.sol",
        "file": "../Registry/IRegistry.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 59,
        "sourceUnit": 439,
        "src": "60:35:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4,
              "name": "IAccessControl",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 66,
              "src": "224:14:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IAccessControl_$66",
                "typeString": "contract IAccessControl"
              }
            },
            "id": 5,
            "nodeType": "InheritanceSpecifier",
            "src": "224:14:0"
          }
        ],
        "contractDependencies": [
          66
        ],
        "contractKind": "contract",
        "documentation": "@dev An interface for the access control contract\r\n@author @vonnie610 (GitHub)\r",
        "fullyImplemented": true,
        "id": 58,
        "linearizedBaseContracts": [
          58,
          66
        ],
        "name": "AccessControl",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 8,
            "name": "isAlive",
            "nodeType": "VariableDeclaration",
            "scope": 58,
            "src": "248:27:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 6,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "248:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "74727565",
              "id": 7,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "271:4:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "true"
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 10,
            "name": "_registryContract",
            "nodeType": "VariableDeclaration",
            "scope": 58,
            "src": "282:35:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IRegistry_$438",
              "typeString": "contract IRegistry"
            },
            "typeName": {
              "contractScope": null,
              "id": 9,
              "name": "IRegistry",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 438,
              "src": "282:9:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IRegistry_$438",
                "typeString": "contract IRegistry"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 21,
              "nodeType": "Block",
              "src": "364:59:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 19,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 15,
                      "name": "_registryContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10,
                      "src": "375:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRegistry_$438",
                        "typeString": "contract IRegistry"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 17,
                          "name": "_registry",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12,
                          "src": "405:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 16,
                        "name": "IRegistry",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 438,
                        "src": "395:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IRegistry_$438_$",
                          "typeString": "type(contract IRegistry)"
                        }
                      },
                      "id": 18,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "395:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRegistry_$438",
                        "typeString": "contract IRegistry"
                      }
                    },
                    "src": "375:40:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRegistry_$438",
                      "typeString": "contract IRegistry"
                    }
                  },
                  "id": 20,
                  "nodeType": "ExpressionStatement",
                  "src": "375:40:0"
                }
              ]
            },
            "documentation": null,
            "id": 22,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12,
                  "name": "_registry",
                  "nodeType": "VariableDeclaration",
                  "scope": 22,
                  "src": "338:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "338:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "337:19:0"
            },
            "returnParameters": {
              "id": 14,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "364:0:0"
            },
            "scope": 58,
            "src": "326:97:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 35,
              "nodeType": "Block",
              "src": "541:158:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 30,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 25,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 688,
                            "src": "574:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 26,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "574:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 28,
                              "name": "_registryContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "596:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IRegistry_$438",
                                "typeString": "contract IRegistry"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IRegistry_$438",
                                "typeString": "contract IRegistry"
                              }
                            ],
                            "id": 27,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "588:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 29,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "588:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "574:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "46756e6374696f6e616c697479207265737472696374656420746f207265676973747279",
                        "id": 31,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "630:38:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_257395a1feb01e6249629f78173a6251e8859cfe9d2ed49534230b1761416d4b",
                          "typeString": "literal_string \"Functionality restricted to registry\""
                        },
                        "value": "Functionality restricted to registry"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_257395a1feb01e6249629f78173a6251e8859cfe9d2ed49534230b1761416d4b",
                          "typeString": "literal_string \"Functionality restricted to registry\""
                        }
                      ],
                      "id": 24,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        691,
                        692
                      ],
                      "referencedDeclaration": 692,
                      "src": "552:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 32,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "552:127:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 33,
                  "nodeType": "ExpressionStatement",
                  "src": "552:127:0"
                },
                {
                  "id": 34,
                  "nodeType": "PlaceholderStatement",
                  "src": "690:1:0"
                }
              ]
            },
            "documentation": "@dev Only allows the register to call this function. \r",
            "id": 36,
            "name": "onlyRegistry",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 23,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "538:2:0"
            },
            "src": "517:182:0",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 44,
              "nodeType": "Block",
              "src": "864:80:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 39,
                        "name": "isAlive",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "883:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "5468697320636f6e747261637420686173206265656e206b696c6c6564",
                        "id": 40,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "892:31:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6125ee284bcbedf6c7ab65465a712f42705eace3b9360a3dd43df13506a64583",
                          "typeString": "literal_string \"This contract has been killed\""
                        },
                        "value": "This contract has been killed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6125ee284bcbedf6c7ab65465a712f42705eace3b9360a3dd43df13506a64583",
                          "typeString": "literal_string \"This contract has been killed\""
                        }
                      ],
                      "id": 38,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        691,
                        692
                      ],
                      "referencedDeclaration": 692,
                      "src": "875:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 41,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "875:49:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 42,
                  "nodeType": "ExpressionStatement",
                  "src": "875:49:0"
                },
                {
                  "id": 43,
                  "nodeType": "PlaceholderStatement",
                  "src": "935:1:0"
                }
              ]
            },
            "documentation": "@dev Ensures that this contracts functionality is only accessible when\r\n     the contract is alive.\r",
            "id": 45,
            "name": "onlyAlive",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 37,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "861:2:0"
            },
            "src": "843:101:0",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 56,
              "nodeType": "Block",
              "src": "1399:36:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 54,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 52,
                      "name": "isAlive",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8,
                      "src": "1410:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 53,
                      "name": "_switch",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 47,
                      "src": "1420:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1410:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 55,
                  "nodeType": "ExpressionStatement",
                  "src": "1410:17:0"
                }
              ]
            },
            "documentation": "@dev Allows the registry to hault all of the access controls\r\n        functionality\r\n@notice The bool _switch means that this hault is reversable. This \r\n        function must be called in the admin contract, which will call\r\n        the registry which will call this function. This was done for \r\n        upgradability.\r",
            "id": 57,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 50,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 49,
                  "name": "onlyRegistry",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 36,
                  "src": "1384:12:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1384:14:0"
              }
            ],
            "name": "killSwitch",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 48,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 47,
                  "name": "_switch",
                  "nodeType": "VariableDeclaration",
                  "scope": 57,
                  "src": "1361:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 46,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1361:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1360:14:0"
            },
            "returnParameters": {
              "id": 51,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1399:0:0"
            },
            "scope": 58,
            "src": "1341:94:0",
            "stateMutability": "nonpayable",
            "superFunction": 65,
            "visibility": "external"
          }
        ],
        "scope": 59,
        "src": "198:1240:0"
      }
    ],
    "src": "0:1438:0"
  },
  "legacyAST": {
    "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/AccessControl/AccessControl.sol",
    "exportedSymbols": {
      "AccessControl": [
        58
      ]
    },
    "id": 59,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "=",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:0"
      },
      {
        "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/AccessControl/IAccessControl.sol",
        "file": "./IAccessControl.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 59,
        "sourceUnit": 67,
        "src": "28:30:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Registry/IRegistry.sol",
        "file": "../Registry/IRegistry.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 59,
        "sourceUnit": 439,
        "src": "60:35:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4,
              "name": "IAccessControl",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 66,
              "src": "224:14:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IAccessControl_$66",
                "typeString": "contract IAccessControl"
              }
            },
            "id": 5,
            "nodeType": "InheritanceSpecifier",
            "src": "224:14:0"
          }
        ],
        "contractDependencies": [
          66
        ],
        "contractKind": "contract",
        "documentation": "@dev An interface for the access control contract\r\n@author @vonnie610 (GitHub)\r",
        "fullyImplemented": true,
        "id": 58,
        "linearizedBaseContracts": [
          58,
          66
        ],
        "name": "AccessControl",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 8,
            "name": "isAlive",
            "nodeType": "VariableDeclaration",
            "scope": 58,
            "src": "248:27:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 6,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "248:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "74727565",
              "id": 7,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "271:4:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "true"
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 10,
            "name": "_registryContract",
            "nodeType": "VariableDeclaration",
            "scope": 58,
            "src": "282:35:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IRegistry_$438",
              "typeString": "contract IRegistry"
            },
            "typeName": {
              "contractScope": null,
              "id": 9,
              "name": "IRegistry",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 438,
              "src": "282:9:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IRegistry_$438",
                "typeString": "contract IRegistry"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 21,
              "nodeType": "Block",
              "src": "364:59:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 19,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 15,
                      "name": "_registryContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10,
                      "src": "375:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRegistry_$438",
                        "typeString": "contract IRegistry"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 17,
                          "name": "_registry",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12,
                          "src": "405:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 16,
                        "name": "IRegistry",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 438,
                        "src": "395:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IRegistry_$438_$",
                          "typeString": "type(contract IRegistry)"
                        }
                      },
                      "id": 18,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "395:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRegistry_$438",
                        "typeString": "contract IRegistry"
                      }
                    },
                    "src": "375:40:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRegistry_$438",
                      "typeString": "contract IRegistry"
                    }
                  },
                  "id": 20,
                  "nodeType": "ExpressionStatement",
                  "src": "375:40:0"
                }
              ]
            },
            "documentation": null,
            "id": 22,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12,
                  "name": "_registry",
                  "nodeType": "VariableDeclaration",
                  "scope": 22,
                  "src": "338:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "338:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "337:19:0"
            },
            "returnParameters": {
              "id": 14,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "364:0:0"
            },
            "scope": 58,
            "src": "326:97:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 35,
              "nodeType": "Block",
              "src": "541:158:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 30,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 25,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 688,
                            "src": "574:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 26,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "574:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 28,
                              "name": "_registryContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "596:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IRegistry_$438",
                                "typeString": "contract IRegistry"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IRegistry_$438",
                                "typeString": "contract IRegistry"
                              }
                            ],
                            "id": 27,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "588:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 29,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "588:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "574:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "46756e6374696f6e616c697479207265737472696374656420746f207265676973747279",
                        "id": 31,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "630:38:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_257395a1feb01e6249629f78173a6251e8859cfe9d2ed49534230b1761416d4b",
                          "typeString": "literal_string \"Functionality restricted to registry\""
                        },
                        "value": "Functionality restricted to registry"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_257395a1feb01e6249629f78173a6251e8859cfe9d2ed49534230b1761416d4b",
                          "typeString": "literal_string \"Functionality restricted to registry\""
                        }
                      ],
                      "id": 24,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        691,
                        692
                      ],
                      "referencedDeclaration": 692,
                      "src": "552:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 32,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "552:127:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 33,
                  "nodeType": "ExpressionStatement",
                  "src": "552:127:0"
                },
                {
                  "id": 34,
                  "nodeType": "PlaceholderStatement",
                  "src": "690:1:0"
                }
              ]
            },
            "documentation": "@dev Only allows the register to call this function. \r",
            "id": 36,
            "name": "onlyRegistry",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 23,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "538:2:0"
            },
            "src": "517:182:0",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 44,
              "nodeType": "Block",
              "src": "864:80:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 39,
                        "name": "isAlive",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "883:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "5468697320636f6e747261637420686173206265656e206b696c6c6564",
                        "id": 40,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "892:31:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6125ee284bcbedf6c7ab65465a712f42705eace3b9360a3dd43df13506a64583",
                          "typeString": "literal_string \"This contract has been killed\""
                        },
                        "value": "This contract has been killed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6125ee284bcbedf6c7ab65465a712f42705eace3b9360a3dd43df13506a64583",
                          "typeString": "literal_string \"This contract has been killed\""
                        }
                      ],
                      "id": 38,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        691,
                        692
                      ],
                      "referencedDeclaration": 692,
                      "src": "875:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 41,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "875:49:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 42,
                  "nodeType": "ExpressionStatement",
                  "src": "875:49:0"
                },
                {
                  "id": 43,
                  "nodeType": "PlaceholderStatement",
                  "src": "935:1:0"
                }
              ]
            },
            "documentation": "@dev Ensures that this contracts functionality is only accessible when\r\n     the contract is alive.\r",
            "id": 45,
            "name": "onlyAlive",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 37,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "861:2:0"
            },
            "src": "843:101:0",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 56,
              "nodeType": "Block",
              "src": "1399:36:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 54,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 52,
                      "name": "isAlive",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8,
                      "src": "1410:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 53,
                      "name": "_switch",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 47,
                      "src": "1420:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1410:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 55,
                  "nodeType": "ExpressionStatement",
                  "src": "1410:17:0"
                }
              ]
            },
            "documentation": "@dev Allows the registry to hault all of the access controls\r\n        functionality\r\n@notice The bool _switch means that this hault is reversable. This \r\n        function must be called in the admin contract, which will call\r\n        the registry which will call this function. This was done for \r\n        upgradability.\r",
            "id": 57,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 50,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 49,
                  "name": "onlyRegistry",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 36,
                  "src": "1384:12:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1384:14:0"
              }
            ],
            "name": "killSwitch",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 48,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 47,
                  "name": "_switch",
                  "nodeType": "VariableDeclaration",
                  "scope": 57,
                  "src": "1361:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 46,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1361:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1360:14:0"
            },
            "returnParameters": {
              "id": 51,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1399:0:0"
            },
            "scope": 58,
            "src": "1341:94:0",
            "stateMutability": "nonpayable",
            "superFunction": 65,
            "visibility": "external"
          }
        ],
        "scope": 59,
        "src": "198:1240:0"
      }
    ],
    "src": "0:1438:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-08-13T16:43:50.089Z",
  "devdoc": {
    "author": "@vonnie610 (GitHub)\r",
    "details": "An interface for the access control contract\r",
    "methods": {
      "killSwitch(bool)": {
        "details": "Allows the registry to hault all of the access controls\r        functionality\r"
      }
    }
  },
  "userdoc": {
    "methods": {
      "killSwitch(bool)": {
        "notice": "The bool _switch means that this hault is reversable. This \r        function must be called in the admin contract, which will call\r        the registry which will call this function. This was done for \r        upgradability.\r"
      }
    }
  }
}