{
  "schemaVersion": "2.0.0",
  "contractName": "IVault",
  "compilerOutput": {
    "abi": [
      {
        "constant": false,
        "inputs": [],
        "name": "donateFunds",
        "outputs": [],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_patient",
            "type": "address"
          },
          {
            "name": "_practitioner",
            "type": "address"
          },
          {
            "name": "_CHW",
            "type": "address"
          },
          {
            "name": "_amountEach",
            "type": "uint256"
          }
        ],
        "name": "payout",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_registry",
            "type": "address"
          }
        ],
        "name": "init",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "kill",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "evm": {
      "bytecode": {
        "linkReferences": {},
        "object": "0x",
        "opcodes": "",
        "sourceMap": ""
      },
      "deployedBytecode": {
        "linkReferences": {},
        "object": "0x",
        "opcodes": "",
        "sourceMap": ""
      }
    }
  },
  "sources": {
    "Vault/IVault.sol": {
      "id": 7
    }
  },
  "sourceCodes": {
    "Vault/IVault.sol": "pragma solidity 0.5.10;\n\ninterface IVault {\n\n    enum UserRole { INACTIVE, ADMIN, CHW, PAT, PRAC }\n    \n    /**\n      * @notice Allows the vault to receive funds from the admin contract. This\n      *         will mint tokens that will be owned by the vault until they are\n      *         spent as payouts.\n      */\n    function donateFunds() external payable;\n\n    /**\n      * @notice Allows a CHW to create payouts. The `msg.sender` is verified\n      *         against the registry.\n      */\n    function payout(\n        address payable _patient,\n        address payable _practitioner,\n        address payable _CHW,\n        uint256 _amountEach\n    )\n        external;\n\n    /**\n      * @notice Allows the admin contract to add the address of the registry.\n      * @dev    The vault will not function untill this function has been\n      *         called. This function is called from the admin contract.\n      */\n    function init(address _registry) external;\n\n    /**\n      * @notice Allows the admin contract to kill the vault. This will make the\n      *         vault send all collateral to the admin contract owner, as well\n      *         as burn all remaining tokens.\n      */\n    function kill() external;\n}"
  },
  "sourceTreeHashHex": "0x600736516d32dffb5205e316f04ec9a32c022c14685a8a27efb13fc5be2adaa5",
  "compiler": {
    "name": "solc",
    "version": "soljson-v0.5.10+commit.5a6ea5b1.js",
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 999
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode.object",
            "evm.deployedBytecode.object"
          ]
        }
      },
      "remappings": []
    }
  },
  "networks": {}
}