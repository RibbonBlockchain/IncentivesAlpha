{
  "contractName": "IVault",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "donateFunds",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_patient",
          "type": "address"
        },
        {
          "name": "_practitioner",
          "type": "address"
        },
        {
          "name": "_CHW",
          "type": "address"
        },
        {
          "name": "_amountEach",
          "type": "uint256"
        }
      ],
      "name": "payout",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "pragma solidity 0.5.10;\n\ninterface IVault {\n\n    enum UserRole { INACTIVE, ADMIN, CHW, PAT, PRAC }\n    \n    /**\n      * @notice Allows the vault to receive funds from the admin contract. This\n      *         will mint tokens that will be owned by the vault until they are\n      *         spent as payouts.\n      */\n    function donateFunds() external payable;\n\n    /**\n      * @notice Allows a CHW to create payouts. The `msg.sender` is verified\n      *         against the registry.\n      */\n    function payout(\n        address payable _patient,\n        address payable _practitioner,\n        address payable _CHW,\n        uint256 _amountEach\n    )\n        external;\n\n    /**\n      * @notice Allows the admin contract to add the address of the registry.\n      * @dev    The vault will not function untill this function has been\n      *         called. This function is called from the admin contract.\n      */\n    function init(address _registry) external;\n\n    /**\n      * @notice Allows the admin contract to kill the vault. This will make the\n      *         vault send all collateral to the admin contract owner, as well\n      *         as burn all remaining tokens.\n      */\n    function kill() external;\n}",
  "sourcePath": "/home/chris/Desktop/DailyGreens/IncentivesAlpha/Blockchain/contracts/Vault/IVault.sol",
  "ast": {
    "absolutePath": "/home/chris/Desktop/DailyGreens/IncentivesAlpha/Blockchain/contracts/Vault/IVault.sol",
    "exportedSymbols": {
      "IVault": [
        869
      ]
    },
    "id": 870,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 840,
        "literals": [
          "solidity",
          "0.5",
          ".10"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:8"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": null,
        "fullyImplemented": false,
        "id": 869,
        "linearizedBaseContracts": [
          869
        ],
        "name": "IVault",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "IVault.UserRole",
            "id": 846,
            "members": [
              {
                "id": 841,
                "name": "INACTIVE",
                "nodeType": "EnumValue",
                "src": "65:8:8"
              },
              {
                "id": 842,
                "name": "ADMIN",
                "nodeType": "EnumValue",
                "src": "75:5:8"
              },
              {
                "id": 843,
                "name": "CHW",
                "nodeType": "EnumValue",
                "src": "82:3:8"
              },
              {
                "id": 844,
                "name": "PAT",
                "nodeType": "EnumValue",
                "src": "87:3:8"
              },
              {
                "id": 845,
                "name": "PRAC",
                "nodeType": "EnumValue",
                "src": "92:4:8"
              }
            ],
            "name": "UserRole",
            "nodeType": "EnumDefinition",
            "src": "49:49:8"
          },
          {
            "body": null,
            "documentation": "@notice Allows the vault to receive funds from the admin contract. This\n        will mint tokens that will be owned by the vault until they are\n        spent as payouts.",
            "id": 849,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "donateFunds",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 847,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "339:2:8"
            },
            "returnParameters": {
              "id": 848,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "358:0:8"
            },
            "scope": 869,
            "src": "319:40:8",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Allows a CHW to create payouts. The `msg.sender` is verified\n        against the registry.",
            "id": 860,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "payout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 858,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 851,
                  "name": "_patient",
                  "nodeType": "VariableDeclaration",
                  "scope": 860,
                  "src": "522:24:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 850,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "522:15:8",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 853,
                  "name": "_practitioner",
                  "nodeType": "VariableDeclaration",
                  "scope": 860,
                  "src": "556:29:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 852,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "556:15:8",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 855,
                  "name": "_CHW",
                  "nodeType": "VariableDeclaration",
                  "scope": 860,
                  "src": "595:20:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 854,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "595:15:8",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 857,
                  "name": "_amountEach",
                  "nodeType": "VariableDeclaration",
                  "scope": 860,
                  "src": "625:19:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 856,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "625:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "512:138:8"
            },
            "returnParameters": {
              "id": 859,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "667:0:8"
            },
            "scope": 869,
            "src": "497:171:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Allows the admin contract to add the address of the registry.\n@dev    The vault will not function untill this function has been\n        called. This function is called from the admin contract.",
            "id": 865,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "init",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 863,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 862,
                  "name": "_registry",
                  "nodeType": "VariableDeclaration",
                  "scope": 865,
                  "src": "930:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 861,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "930:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "929:19:8"
            },
            "returnParameters": {
              "id": 864,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "957:0:8"
            },
            "scope": 869,
            "src": "916:42:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Allows the admin contract to kill the vault. This will make the\n        vault send all collateral to the admin contract owner, as well\n        as burn all remaining tokens.",
            "id": 868,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "kill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 866,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1199:2:8"
            },
            "returnParameters": {
              "id": 867,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1210:0:8"
            },
            "scope": 869,
            "src": "1186:25:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 870,
        "src": "25:1188:8"
      }
    ],
    "src": "0:1213:8"
  },
  "legacyAST": {
    "absolutePath": "/home/chris/Desktop/DailyGreens/IncentivesAlpha/Blockchain/contracts/Vault/IVault.sol",
    "exportedSymbols": {
      "IVault": [
        869
      ]
    },
    "id": 870,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 840,
        "literals": [
          "solidity",
          "0.5",
          ".10"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:8"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": null,
        "fullyImplemented": false,
        "id": 869,
        "linearizedBaseContracts": [
          869
        ],
        "name": "IVault",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "IVault.UserRole",
            "id": 846,
            "members": [
              {
                "id": 841,
                "name": "INACTIVE",
                "nodeType": "EnumValue",
                "src": "65:8:8"
              },
              {
                "id": 842,
                "name": "ADMIN",
                "nodeType": "EnumValue",
                "src": "75:5:8"
              },
              {
                "id": 843,
                "name": "CHW",
                "nodeType": "EnumValue",
                "src": "82:3:8"
              },
              {
                "id": 844,
                "name": "PAT",
                "nodeType": "EnumValue",
                "src": "87:3:8"
              },
              {
                "id": 845,
                "name": "PRAC",
                "nodeType": "EnumValue",
                "src": "92:4:8"
              }
            ],
            "name": "UserRole",
            "nodeType": "EnumDefinition",
            "src": "49:49:8"
          },
          {
            "body": null,
            "documentation": "@notice Allows the vault to receive funds from the admin contract. This\n        will mint tokens that will be owned by the vault until they are\n        spent as payouts.",
            "id": 849,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "donateFunds",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 847,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "339:2:8"
            },
            "returnParameters": {
              "id": 848,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "358:0:8"
            },
            "scope": 869,
            "src": "319:40:8",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Allows a CHW to create payouts. The `msg.sender` is verified\n        against the registry.",
            "id": 860,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "payout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 858,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 851,
                  "name": "_patient",
                  "nodeType": "VariableDeclaration",
                  "scope": 860,
                  "src": "522:24:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 850,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "522:15:8",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 853,
                  "name": "_practitioner",
                  "nodeType": "VariableDeclaration",
                  "scope": 860,
                  "src": "556:29:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 852,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "556:15:8",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 855,
                  "name": "_CHW",
                  "nodeType": "VariableDeclaration",
                  "scope": 860,
                  "src": "595:20:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 854,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "595:15:8",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 857,
                  "name": "_amountEach",
                  "nodeType": "VariableDeclaration",
                  "scope": 860,
                  "src": "625:19:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 856,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "625:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "512:138:8"
            },
            "returnParameters": {
              "id": 859,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "667:0:8"
            },
            "scope": 869,
            "src": "497:171:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Allows the admin contract to add the address of the registry.\n@dev    The vault will not function untill this function has been\n        called. This function is called from the admin contract.",
            "id": 865,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "init",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 863,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 862,
                  "name": "_registry",
                  "nodeType": "VariableDeclaration",
                  "scope": 865,
                  "src": "930:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 861,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "930:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "929:19:8"
            },
            "returnParameters": {
              "id": 864,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "957:0:8"
            },
            "scope": 869,
            "src": "916:42:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Allows the admin contract to kill the vault. This will make the\n        vault send all collateral to the admin contract owner, as well\n        as burn all remaining tokens.",
            "id": 868,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "kill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 866,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1199:2:8"
            },
            "returnParameters": {
              "id": 867,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1210:0:8"
            },
            "scope": 869,
            "src": "1186:25:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 870,
        "src": "25:1188:8"
      }
    ],
    "src": "0:1213:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.10+commit.5a6ea5b1.Emscripten.clang",
    "optimizer": true,
    "runs": 500
  },
  "networks": {},
  "schemaVersion": "2.2.0",
  "updatedAt": "2019-10-08T12:36:20.012Z"
}