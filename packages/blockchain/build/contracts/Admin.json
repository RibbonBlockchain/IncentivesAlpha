{
  "contractName": "Admin",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "renounceWhitelistAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addWhitelistAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWhitelistAdmin",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistAdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistAdminRemoved",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_vault",
          "type": "address"
        },
        {
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_switch",
          "type": "bool"
        }
      ],
      "name": "systemFreeze",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newAccessContract",
          "type": "address"
        }
      ],
      "name": "updateAccessContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_newAccessContract\",\"type\":\"address\"}],\"name\":\"updateAccessContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_switch\",\"type\":\"bool\"}],\"name\":\"systemFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"@vonnie610 (GitHub)\\r\",\"details\":\"The Admin contract which controls the contract ecosystem.\\r\",\"methods\":{\"init(address,address)\":{\"details\":\"Sets up the addresses for the vault and registry.\\r\"},\"systemFreeze(bool)\":{\"details\":\"This function allows an admin to freeze the vault and the active\\r     access control contract, as well as disabling payouts on the \\r     registry & vault.\\r\"},\"updateAccessContract(address)\":{\"details\":\"Allows an admin to update the contract used for access control\\r     and fund rate limiting.\\r\"}}},\"userdoc\":{\"methods\":{\"init(address,address)\":{\"notice\":\"This allows the admin to act as admin over these contracts.\\r\"}}}},\"settings\":{\"compilationTarget\":{\"/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Admin/Admin.sol\":\"Admin\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Admin/Admin.sol\":{\"keccak256\":\"0x29ca0dcd7208d56a6998d9fa5116d2acb9af9817f4deefd585e3f7a934190d29\",\"urls\":[\"bzzr://b1c3f264bf753333c2a256abf8e2b260ce5369bb1f349706a9bd1d9f09351e84\"]},\"/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Admin/IAdmin.sol\":{\"keccak256\":\"0x34090f92b714be335ebd12554cdc3af95e675adb8d849142c91cf80509fba776\",\"urls\":[\"bzzr://add72654f8439b0914f047de36add25e740b84e57c5bad5dd8ae5dfe5bbf275f\"]},\"/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Admin/Roles.sol\":{\"keccak256\":\"0xb002c378d7b82a101bd659c341518953ca0919d342c0a400196982c0e7e7bcdb\",\"urls\":[\"bzzr://bd34c1ce05b5b2b3a62fc02e160f6805b1cadd476854664f433c685b2fda8dad\"]},\"/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Admin/WhitelistAdminRole.sol\":{\"keccak256\":\"0x3208e0430ca3b40ba36620e790689cf63decb4d6c9328212b51e58f2e1f739ce\",\"urls\":[\"bzzr://347d69d06747fe2dfb2b80460e37670ccfb89b61cac36c50a4c440fffeb77b50\"]},\"/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Registry/IRegistry.sol\":{\"keccak256\":\"0xd1f75d92542bcfffea18dfd1aefc560a70bcce5a8d5a5d151b0ad572a6cea163\",\"urls\":[\"bzzr://f6bb0c62b874b878631544b9940b8b1a62311161abf8b24dae0dd386919cc571\"]},\"/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Vault/IFundingVault.sol\":{\"keccak256\":\"0x73773ff7d8bf61aeae0d0952a11b9fb0894fea9063b038a948efce48c74a08fa\",\"urls\":[\"bzzr://5cf5994688aaa79c7e29b94a5f4806722f7e1e11d672df8be3d1b225888d3cb3\"]}},\"version\":1}",
  "bytecode": "0x608060405260018060006101000a81548160ff0219169083151502179055506100363361003b640100000000026401000000009004565b6102b1565b61005c8160006100a264010000000002610c84179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129960405160405180910390a250565b6100bb828261018e640100000000026401000000009004565b151515610130576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561025a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610d8d806102c06000396000f3fe608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806337d692531461007d57806340a9f71f146100ce5780634c5a628c1461010b5780637362d9c814610122578063bb5f747b14610173578063f09a4016146101dc575b600080fd5b34801561008957600080fd5b506100cc600480360360208110156100a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061024d565b005b3480156100da57600080fd5b50610109600480360360208110156100f157600080fd5b810190808035151590602001909291905050506103c8565b005b34801561011757600080fd5b506101206105e1565b005b34801561012e57600080fd5b506101716004803603602081101561014557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105ec565b005b34801561017f57600080fd5b506101c26004803603602081101561019657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061069b565b604051808215151515815260200191505060405180910390f35b3480156101e857600080fd5b5061024b600480360360408110156101ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106b8565b005b6102563361069b565b15156102f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001807f57686974656c69737441646d696e526f6c653a2063616c6c657220646f65732081526020017f6e6f742068617665207468652057686974656c69737441646d696e20726f6c6581525060400191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f89488db826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156103ad57600080fd5b505af11580156103c1573d6000803e3d6000fd5b5050505050565b6103d13361069b565b151561046b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001807f57686974656c69737441646d696e526f6c653a2063616c6c657220646f65732081526020017f6e6f742068617665207468652057686974656c69737441646d696e20726f6c6581525060400191505060405180910390fd5b80600160006101000a81548160ff0219169083151502179055506001809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e2c74f6826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082151515158152602001915050600060405180830381600087803b15801561051957600080fd5b505af115801561052d573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e2c74f6826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082151515158152602001915050600060405180830381600087803b1580156105c657600080fd5b505af11580156105da573d6000803e3d6000fd5b5050505050565b6105ea336109ab565b565b6105f53361069b565b151561068f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001807f57686974656c69737441646d696e526f6c653a2063616c6c657220646f65732081526020017f6e6f742068617665207468652057686974656c69737441646d696e20726f6c6581525060400191505060405180910390fd5b61069881610a05565b50565b60006106b1826000610a5f90919063ffffffff16565b9050919050565b6106c13361069b565b151561075b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001807f57686974656c69737441646d696e526f6c653a2063616c6c657220646f65732081526020017f6e6f742068617665207468652057686974656c69737441646d696e20726f6c6581525060400191505060405180910390fd5b816001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a91ee0dc826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561085757600080fd5b505af115801561086b573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636817031b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561098f57600080fd5b505af11580156109a3573d6000803e3d6000fd5b505050505050565b6109bf816000610b8290919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f0a8eb35e5ca14b3d6f28e4abf2f128dbab231a58b56e89beb5d636115001e16560405160405180910390a250565b610a19816000610c8490919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129960405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610b2b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610b8c8282610a5f565b1515610c26576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c81526020017f650000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b610c8e8282610a5f565b151515610d03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fea165627a7a723058208691bd909c79d32812e7bf4fe218ecb5e8d3ae8a3e75f169c0371189ea32c8d90029",
  "deployedBytecode": "0x608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806337d692531461007d57806340a9f71f146100ce5780634c5a628c1461010b5780637362d9c814610122578063bb5f747b14610173578063f09a4016146101dc575b600080fd5b34801561008957600080fd5b506100cc600480360360208110156100a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061024d565b005b3480156100da57600080fd5b50610109600480360360208110156100f157600080fd5b810190808035151590602001909291905050506103c8565b005b34801561011757600080fd5b506101206105e1565b005b34801561012e57600080fd5b506101716004803603602081101561014557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105ec565b005b34801561017f57600080fd5b506101c26004803603602081101561019657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061069b565b604051808215151515815260200191505060405180910390f35b3480156101e857600080fd5b5061024b600480360360408110156101ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106b8565b005b6102563361069b565b15156102f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001807f57686974656c69737441646d696e526f6c653a2063616c6c657220646f65732081526020017f6e6f742068617665207468652057686974656c69737441646d696e20726f6c6581525060400191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f89488db826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156103ad57600080fd5b505af11580156103c1573d6000803e3d6000fd5b5050505050565b6103d13361069b565b151561046b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001807f57686974656c69737441646d696e526f6c653a2063616c6c657220646f65732081526020017f6e6f742068617665207468652057686974656c69737441646d696e20726f6c6581525060400191505060405180910390fd5b80600160006101000a81548160ff0219169083151502179055506001809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e2c74f6826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082151515158152602001915050600060405180830381600087803b15801561051957600080fd5b505af115801561052d573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e2c74f6826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082151515158152602001915050600060405180830381600087803b1580156105c657600080fd5b505af11580156105da573d6000803e3d6000fd5b5050505050565b6105ea336109ab565b565b6105f53361069b565b151561068f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001807f57686974656c69737441646d696e526f6c653a2063616c6c657220646f65732081526020017f6e6f742068617665207468652057686974656c69737441646d696e20726f6c6581525060400191505060405180910390fd5b61069881610a05565b50565b60006106b1826000610a5f90919063ffffffff16565b9050919050565b6106c13361069b565b151561075b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001807f57686974656c69737441646d696e526f6c653a2063616c6c657220646f65732081526020017f6e6f742068617665207468652057686974656c69737441646d696e20726f6c6581525060400191505060405180910390fd5b816001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a91ee0dc826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561085757600080fd5b505af115801561086b573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636817031b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561098f57600080fd5b505af11580156109a3573d6000803e3d6000fd5b505050505050565b6109bf816000610b8290919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f0a8eb35e5ca14b3d6f28e4abf2f128dbab231a58b56e89beb5d636115001e16560405160405180910390a250565b610a19816000610c8490919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129960405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610b2b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610b8c8282610a5f565b1515610c26576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c81526020017f650000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b610c8e8282610a5f565b151515610d03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fea165627a7a723058208691bd909c79d32812e7bf4fe218ecb5e8d3ae8a3e75f169c0371189ea32c8d90029",
  "sourceMap": "277:1634:2:-;;;391:4;368:27;;;;;;;;;;;;;;;;;;;;432:30:5;451:10;432:18;;;:30;;;:::i;:::-;277:1634:2;;990:143:5;1054:29;1075:7;1054:16;:20;;;;;;:29;;;;;:::i;:::-;1118:7;1098:28;;;;;;;;;;;;990:143;:::o;260:175:4:-;337:18;341:4;347:7;337:3;;;:18;;;:::i;:::-;336:19;328:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;424:4;401;:11;;:20;413:7;401:20;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;260:175;;:::o;779:200::-;851:4;894:1;875:21;;:7;:21;;;;867:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;952:4;:11;;:20;964:7;952:20;;;;;;;;;;;;;;;;;;;;;;;;;945:27;;779:200;;;;:::o;277:1634:2:-;;;;;;;",
  "deployedSourceMap": "277:1634:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1721:187;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1721:187:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1721:187:2;;;;;;;;;;;;;;;;;;;;;;1391:188;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1391:188:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1391:188:2;;;;;;;;;;;;;;;;;;;;;;893:91:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;893:91:5;;;;;;773:114;;8:9:-1;5:2;;;30:1;27;20:12;5:2;773:114:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;773:114:5;;;;;;;;;;;;;;;;;;;;;;644:123;;8:9:-1;5:2;;;30:1;27;20:12;5:2;644:123:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;644:123:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;741:436:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;741:436:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;741:436:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1721:187;523:28:5;540:10;523:16;:28::i;:::-;515:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1843:17:2;;;;;;;;;;;:37;;;1881:18;1843:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1843:57:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1843:57:2;;;;1721:187;:::o;1391:188::-;523:28:5;540:10;523:16;:28::i;:::-;515:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1476:7:2;1466;;:17;;;;;;;;;;;;;;;;;;1494:21;;;;;;;;;;;:26;;;1521:7;1494:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1494:35:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1494:35:2;;;;1540:17;;;;;;;;;;;:22;;;1563:7;1540:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1540:31:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1540:31:2;;;;1391:188;:::o;893:91:5:-;944:33;966:10;944:21;:33::i;:::-;893:91::o;773:114::-;523:28;540:10;523:16;:28::i;:::-;515:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;853:27;872:7;853:18;:27::i;:::-;773:114;:::o;644:123::-;708:4;731:29;752:7;731:16;:20;;:29;;;;:::i;:::-;724:36;;644:123;;;:::o;741:436:2:-;523:28:5;540:10;523:16;:28::i;:::-;515:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;891:6:2;853:21;;:45;;;;;;;;;;;;;;;;;;965:21;;;;;;;;;;;:33;;;999:9;965:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;965:44:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;965:44:2;;;;1050:17;;;;;;;;;;;1020;;:48;;;;;;;;;;;;;;;;;;1135:17;;;;;;;;;;;:26;;;1162:6;1135:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1135:34:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1135:34:2;;;;741:436;;:::o;1139:151:5:-;1206:32;1230:7;1206:16;:23;;:32;;;;:::i;:::-;1275:7;1253:30;;;;;;;;;;;;1139:151;:::o;990:143::-;1054:29;1075:7;1054:16;:20;;:29;;;;:::i;:::-;1118:7;1098:28;;;;;;;;;;;;990:143;:::o;779:200:4:-;851:4;894:1;875:21;;:7;:21;;;;867:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;952:4;:11;;:20;964:7;952:20;;;;;;;;;;;;;;;;;;;;;;;;;945:27;;779:200;;;;:::o;510:180::-;589:18;593:4;599:7;589:3;:18::i;:::-;581:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;678:5;655:4;:11;;:20;667:7;655:20;;;;;;;;;;;;;;;;:28;;;;;;;;;;;;;;;;;;510:180;;:::o;260:175::-;337:18;341:4;347:7;337:3;:18::i;:::-;336:19;328:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;424:4;401;:11;;:20;413:7;401:20;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;260:175;;:::o",
  "source": "pragma solidity = 0.5.0;\r\n\r\nimport \"./WhitelistAdminRole.sol\";\r\nimport \"./IAdmin.sol\";\r\nimport \"../Vault/IFundingVault.sol\";\r\nimport \"../Registry/IRegistry.sol\";\r\n\r\n/**\r\n  * @dev The Admin contract which controls the contract ecosystem.\r\n  * @author @vonnie610 (GitHub)\r\n  */\r\ncontract Admin is WhitelistAdminRole, IAdmin {\r\n    // Keeps track of system liveness\r\n    bool private isAlive = true;\r\n    // A contract instance of the vault\r\n    IFundingVault private _fundingVaultContract;\r\n    // A contract instance of the registry\r\n    IRegistry private _registryContract;\r\n\r\n    /**\r\n      * @dev Sets up the addresses for the vault and registry.\r\n      * @notice This allows the admin to act as admin over these contracts.\r\n      */\r\n    function init(address _vault, address _registry) \r\n        public\r\n        onlyWhitelistAdmin()\r\n    {\r\n        _fundingVaultContract = IFundingVault(_vault);\r\n        // Sends the vault the address of the registry\r\n        _fundingVaultContract.setRegistry(_registry);\r\n        _registryContract = IRegistry(_registryContract);\r\n        // Sends the registry the address of the vault\r\n        _registryContract.setVault(_vault);\r\n    }\r\n\r\n    /**\r\n      * @dev This function allows an admin to freeze the vault and the active\r\n      *      access control contract, as well as disabling payouts on the \r\n      *      registry & vault.\r\n      */\r\n    function systemFreeze(bool _switch) public onlyWhitelistAdmin() {\r\n        isAlive = _switch;\r\n        _fundingVaultContract.kill(_switch);\r\n        _registryContract.kill(_switch);\r\n    }\r\n\r\n    /**\r\n      * @dev Allows an admin to update the contract used for access control\r\n      *      and fund rate limiting.\r\n      */\r\n    function updateAccessContract(address _newAccessContract) \r\n        public \r\n        onlyWhitelistAdmin()\r\n    {\r\n        _registryContract.updateAccessControl(_newAccessContract);\r\n    }\r\n}",
  "sourcePath": "C:/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Admin/Admin.sol",
  "ast": {
    "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Admin/Admin.sol",
    "exportedSymbols": {
      "Admin": [
        156
      ]
    },
    "id": 157,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 68,
        "literals": [
          "solidity",
          "=",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:2"
      },
      {
        "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Admin/WhitelistAdminRole.sol",
        "file": "./WhitelistAdminRole.sol",
        "id": 69,
        "nodeType": "ImportDirective",
        "scope": 157,
        "sourceUnit": 345,
        "src": "28:34:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Admin/IAdmin.sol",
        "file": "./IAdmin.sol",
        "id": 70,
        "nodeType": "ImportDirective",
        "scope": 157,
        "sourceUnit": 160,
        "src": "64:22:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Vault/IFundingVault.sol",
        "file": "../Vault/IFundingVault.sol",
        "id": 71,
        "nodeType": "ImportDirective",
        "scope": 157,
        "sourceUnit": 674,
        "src": "88:36:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Registry/IRegistry.sol",
        "file": "../Registry/IRegistry.sol",
        "id": 72,
        "nodeType": "ImportDirective",
        "scope": 157,
        "sourceUnit": 439,
        "src": "126:35:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 73,
              "name": "WhitelistAdminRole",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 344,
              "src": "295:18:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_WhitelistAdminRole_$344",
                "typeString": "contract WhitelistAdminRole"
              }
            },
            "id": 74,
            "nodeType": "InheritanceSpecifier",
            "src": "295:18:2"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 75,
              "name": "IAdmin",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 159,
              "src": "315:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IAdmin_$159",
                "typeString": "contract IAdmin"
              }
            },
            "id": 76,
            "nodeType": "InheritanceSpecifier",
            "src": "315:6:2"
          }
        ],
        "contractDependencies": [
          159,
          344
        ],
        "contractKind": "contract",
        "documentation": "@dev The Admin contract which controls the contract ecosystem.\r\n@author @vonnie610 (GitHub)\r",
        "fullyImplemented": true,
        "id": 156,
        "linearizedBaseContracts": [
          156,
          159,
          344
        ],
        "name": "Admin",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 79,
            "name": "isAlive",
            "nodeType": "VariableDeclaration",
            "scope": 156,
            "src": "368:27:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 77,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "368:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "74727565",
              "id": 78,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "391:4:2",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "true"
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 81,
            "name": "_fundingVaultContract",
            "nodeType": "VariableDeclaration",
            "scope": 156,
            "src": "443:43:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IFundingVault_$673",
              "typeString": "contract IFundingVault"
            },
            "typeName": {
              "contractScope": null,
              "id": 80,
              "name": "IFundingVault",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 673,
              "src": "443:13:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IFundingVault_$673",
                "typeString": "contract IFundingVault"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 83,
            "name": "_registryContract",
            "nodeType": "VariableDeclaration",
            "scope": 156,
            "src": "537:35:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IRegistry_$438",
              "typeString": "contract IRegistry"
            },
            "typeName": {
              "contractScope": null,
              "id": 82,
              "name": "IRegistry",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 438,
              "src": "537:9:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IRegistry_$438",
                "typeString": "contract IRegistry"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 116,
              "nodeType": "Block",
              "src": "842:335:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 96,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 92,
                      "name": "_fundingVaultContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 81,
                      "src": "853:21:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IFundingVault_$673",
                        "typeString": "contract IFundingVault"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 94,
                          "name": "_vault",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 85,
                          "src": "891:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 93,
                        "name": "IFundingVault",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 673,
                        "src": "877:13:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IFundingVault_$673_$",
                          "typeString": "type(contract IFundingVault)"
                        }
                      },
                      "id": 95,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "877:21:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IFundingVault_$673",
                        "typeString": "contract IFundingVault"
                      }
                    },
                    "src": "853:45:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IFundingVault_$673",
                      "typeString": "contract IFundingVault"
                    }
                  },
                  "id": 97,
                  "nodeType": "ExpressionStatement",
                  "src": "853:45:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 101,
                        "name": "_registry",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87,
                        "src": "999:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 98,
                        "name": "_fundingVaultContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 81,
                        "src": "965:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFundingVault_$673",
                          "typeString": "contract IFundingVault"
                        }
                      },
                      "id": 100,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "setRegistry",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 667,
                      "src": "965:33:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 102,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "965:44:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 103,
                  "nodeType": "ExpressionStatement",
                  "src": "965:44:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 108,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 104,
                      "name": "_registryContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 83,
                      "src": "1020:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRegistry_$438",
                        "typeString": "contract IRegistry"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 106,
                          "name": "_registryContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 83,
                          "src": "1050:17:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IRegistry_$438",
                            "typeString": "contract IRegistry"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_IRegistry_$438",
                            "typeString": "contract IRegistry"
                          }
                        ],
                        "id": 105,
                        "name": "IRegistry",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 438,
                        "src": "1040:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IRegistry_$438_$",
                          "typeString": "type(contract IRegistry)"
                        }
                      },
                      "id": 107,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1040:28:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRegistry_$438",
                        "typeString": "contract IRegistry"
                      }
                    },
                    "src": "1020:48:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRegistry_$438",
                      "typeString": "contract IRegistry"
                    }
                  },
                  "id": 109,
                  "nodeType": "ExpressionStatement",
                  "src": "1020:48:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 113,
                        "name": "_vault",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 85,
                        "src": "1162:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 110,
                        "name": "_registryContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 83,
                        "src": "1135:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRegistry_$438",
                          "typeString": "contract IRegistry"
                        }
                      },
                      "id": 112,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "setVault",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 408,
                      "src": "1135:26:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 114,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1135:34:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 115,
                  "nodeType": "ExpressionStatement",
                  "src": "1135:34:2"
                }
              ]
            },
            "documentation": "@dev Sets up the addresses for the vault and registry.\r\n@notice This allows the admin to act as admin over these contracts.\r",
            "id": 117,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 90,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 89,
                  "name": "onlyWhitelistAdmin",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 277,
                  "src": "816:18:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "816:20:2"
              }
            ],
            "name": "init",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 88,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 85,
                  "name": "_vault",
                  "nodeType": "VariableDeclaration",
                  "scope": 117,
                  "src": "755:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 84,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "755:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87,
                  "name": "_registry",
                  "nodeType": "VariableDeclaration",
                  "scope": 117,
                  "src": "771:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 86,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "771:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "754:35:2"
            },
            "returnParameters": {
              "id": 91,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "842:0:2"
            },
            "scope": 156,
            "src": "741:436:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 140,
              "nodeType": "Block",
              "src": "1455:124:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 126,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 124,
                      "name": "isAlive",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79,
                      "src": "1466:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 125,
                      "name": "_switch",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 119,
                      "src": "1476:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1466:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 127,
                  "nodeType": "ExpressionStatement",
                  "src": "1466:17:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 131,
                        "name": "_switch",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 119,
                        "src": "1521:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 128,
                        "name": "_fundingVaultContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 81,
                        "src": "1494:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFundingVault_$673",
                          "typeString": "contract IFundingVault"
                        }
                      },
                      "id": 130,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "kill",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 672,
                      "src": "1494:26:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_bool_$returns$__$",
                        "typeString": "function (bool) external"
                      }
                    },
                    "id": 132,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1494:35:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 133,
                  "nodeType": "ExpressionStatement",
                  "src": "1494:35:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 137,
                        "name": "_switch",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 119,
                        "src": "1563:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 134,
                        "name": "_registryContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 83,
                        "src": "1540:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRegistry_$438",
                          "typeString": "contract IRegistry"
                        }
                      },
                      "id": 136,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "kill",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 418,
                      "src": "1540:22:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_bool_$returns$__$",
                        "typeString": "function (bool) external"
                      }
                    },
                    "id": 138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1540:31:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 139,
                  "nodeType": "ExpressionStatement",
                  "src": "1540:31:2"
                }
              ]
            },
            "documentation": "@dev This function allows an admin to freeze the vault and the active\r\n     access control contract, as well as disabling payouts on the \r\n     registry & vault.\r",
            "id": 141,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 122,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 121,
                  "name": "onlyWhitelistAdmin",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 277,
                  "src": "1434:18:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1434:20:2"
              }
            ],
            "name": "systemFreeze",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 120,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 119,
                  "name": "_switch",
                  "nodeType": "VariableDeclaration",
                  "scope": 141,
                  "src": "1413:12:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 118,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1413:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1412:14:2"
            },
            "returnParameters": {
              "id": 123,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1455:0:2"
            },
            "scope": 156,
            "src": "1391:188:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 154,
              "nodeType": "Block",
              "src": "1832:76:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 151,
                        "name": "_newAccessContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 143,
                        "src": "1881:18:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 148,
                        "name": "_registryContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 83,
                        "src": "1843:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRegistry_$438",
                          "typeString": "contract IRegistry"
                        }
                      },
                      "id": 150,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "updateAccessControl",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 413,
                      "src": "1843:37:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 152,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1843:57:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 153,
                  "nodeType": "ExpressionStatement",
                  "src": "1843:57:2"
                }
              ]
            },
            "documentation": "@dev Allows an admin to update the contract used for access control\r\n     and fund rate limiting.\r",
            "id": 155,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 146,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 145,
                  "name": "onlyWhitelistAdmin",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 277,
                  "src": "1806:18:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1806:20:2"
              }
            ],
            "name": "updateAccessContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 144,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 143,
                  "name": "_newAccessContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 155,
                  "src": "1751:26:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 142,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1751:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1750:28:2"
            },
            "returnParameters": {
              "id": 147,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1832:0:2"
            },
            "scope": 156,
            "src": "1721:187:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 157,
        "src": "277:1634:2"
      }
    ],
    "src": "0:1911:2"
  },
  "legacyAST": {
    "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Admin/Admin.sol",
    "exportedSymbols": {
      "Admin": [
        156
      ]
    },
    "id": 157,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 68,
        "literals": [
          "solidity",
          "=",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:2"
      },
      {
        "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Admin/WhitelistAdminRole.sol",
        "file": "./WhitelistAdminRole.sol",
        "id": 69,
        "nodeType": "ImportDirective",
        "scope": 157,
        "sourceUnit": 345,
        "src": "28:34:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Admin/IAdmin.sol",
        "file": "./IAdmin.sol",
        "id": 70,
        "nodeType": "ImportDirective",
        "scope": 157,
        "sourceUnit": 160,
        "src": "64:22:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Vault/IFundingVault.sol",
        "file": "../Vault/IFundingVault.sol",
        "id": 71,
        "nodeType": "ImportDirective",
        "scope": 157,
        "sourceUnit": 674,
        "src": "88:36:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ribbon/projects/IncentivesAlpha/Blockchain/contracts/Registry/IRegistry.sol",
        "file": "../Registry/IRegistry.sol",
        "id": 72,
        "nodeType": "ImportDirective",
        "scope": 157,
        "sourceUnit": 439,
        "src": "126:35:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 73,
              "name": "WhitelistAdminRole",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 344,
              "src": "295:18:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_WhitelistAdminRole_$344",
                "typeString": "contract WhitelistAdminRole"
              }
            },
            "id": 74,
            "nodeType": "InheritanceSpecifier",
            "src": "295:18:2"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 75,
              "name": "IAdmin",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 159,
              "src": "315:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IAdmin_$159",
                "typeString": "contract IAdmin"
              }
            },
            "id": 76,
            "nodeType": "InheritanceSpecifier",
            "src": "315:6:2"
          }
        ],
        "contractDependencies": [
          159,
          344
        ],
        "contractKind": "contract",
        "documentation": "@dev The Admin contract which controls the contract ecosystem.\r\n@author @vonnie610 (GitHub)\r",
        "fullyImplemented": true,
        "id": 156,
        "linearizedBaseContracts": [
          156,
          159,
          344
        ],
        "name": "Admin",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 79,
            "name": "isAlive",
            "nodeType": "VariableDeclaration",
            "scope": 156,
            "src": "368:27:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 77,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "368:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "74727565",
              "id": 78,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "391:4:2",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "true"
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 81,
            "name": "_fundingVaultContract",
            "nodeType": "VariableDeclaration",
            "scope": 156,
            "src": "443:43:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IFundingVault_$673",
              "typeString": "contract IFundingVault"
            },
            "typeName": {
              "contractScope": null,
              "id": 80,
              "name": "IFundingVault",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 673,
              "src": "443:13:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IFundingVault_$673",
                "typeString": "contract IFundingVault"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 83,
            "name": "_registryContract",
            "nodeType": "VariableDeclaration",
            "scope": 156,
            "src": "537:35:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IRegistry_$438",
              "typeString": "contract IRegistry"
            },
            "typeName": {
              "contractScope": null,
              "id": 82,
              "name": "IRegistry",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 438,
              "src": "537:9:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IRegistry_$438",
                "typeString": "contract IRegistry"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 116,
              "nodeType": "Block",
              "src": "842:335:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 96,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 92,
                      "name": "_fundingVaultContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 81,
                      "src": "853:21:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IFundingVault_$673",
                        "typeString": "contract IFundingVault"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 94,
                          "name": "_vault",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 85,
                          "src": "891:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 93,
                        "name": "IFundingVault",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 673,
                        "src": "877:13:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IFundingVault_$673_$",
                          "typeString": "type(contract IFundingVault)"
                        }
                      },
                      "id": 95,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "877:21:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IFundingVault_$673",
                        "typeString": "contract IFundingVault"
                      }
                    },
                    "src": "853:45:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IFundingVault_$673",
                      "typeString": "contract IFundingVault"
                    }
                  },
                  "id": 97,
                  "nodeType": "ExpressionStatement",
                  "src": "853:45:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 101,
                        "name": "_registry",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87,
                        "src": "999:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 98,
                        "name": "_fundingVaultContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 81,
                        "src": "965:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFundingVault_$673",
                          "typeString": "contract IFundingVault"
                        }
                      },
                      "id": 100,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "setRegistry",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 667,
                      "src": "965:33:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 102,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "965:44:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 103,
                  "nodeType": "ExpressionStatement",
                  "src": "965:44:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 108,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 104,
                      "name": "_registryContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 83,
                      "src": "1020:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRegistry_$438",
                        "typeString": "contract IRegistry"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 106,
                          "name": "_registryContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 83,
                          "src": "1050:17:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IRegistry_$438",
                            "typeString": "contract IRegistry"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_IRegistry_$438",
                            "typeString": "contract IRegistry"
                          }
                        ],
                        "id": 105,
                        "name": "IRegistry",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 438,
                        "src": "1040:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IRegistry_$438_$",
                          "typeString": "type(contract IRegistry)"
                        }
                      },
                      "id": 107,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1040:28:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRegistry_$438",
                        "typeString": "contract IRegistry"
                      }
                    },
                    "src": "1020:48:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRegistry_$438",
                      "typeString": "contract IRegistry"
                    }
                  },
                  "id": 109,
                  "nodeType": "ExpressionStatement",
                  "src": "1020:48:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 113,
                        "name": "_vault",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 85,
                        "src": "1162:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 110,
                        "name": "_registryContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 83,
                        "src": "1135:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRegistry_$438",
                          "typeString": "contract IRegistry"
                        }
                      },
                      "id": 112,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "setVault",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 408,
                      "src": "1135:26:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 114,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1135:34:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 115,
                  "nodeType": "ExpressionStatement",
                  "src": "1135:34:2"
                }
              ]
            },
            "documentation": "@dev Sets up the addresses for the vault and registry.\r\n@notice This allows the admin to act as admin over these contracts.\r",
            "id": 117,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 90,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 89,
                  "name": "onlyWhitelistAdmin",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 277,
                  "src": "816:18:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "816:20:2"
              }
            ],
            "name": "init",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 88,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 85,
                  "name": "_vault",
                  "nodeType": "VariableDeclaration",
                  "scope": 117,
                  "src": "755:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 84,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "755:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87,
                  "name": "_registry",
                  "nodeType": "VariableDeclaration",
                  "scope": 117,
                  "src": "771:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 86,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "771:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "754:35:2"
            },
            "returnParameters": {
              "id": 91,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "842:0:2"
            },
            "scope": 156,
            "src": "741:436:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 140,
              "nodeType": "Block",
              "src": "1455:124:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 126,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 124,
                      "name": "isAlive",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79,
                      "src": "1466:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 125,
                      "name": "_switch",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 119,
                      "src": "1476:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1466:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 127,
                  "nodeType": "ExpressionStatement",
                  "src": "1466:17:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 131,
                        "name": "_switch",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 119,
                        "src": "1521:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 128,
                        "name": "_fundingVaultContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 81,
                        "src": "1494:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFundingVault_$673",
                          "typeString": "contract IFundingVault"
                        }
                      },
                      "id": 130,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "kill",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 672,
                      "src": "1494:26:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_bool_$returns$__$",
                        "typeString": "function (bool) external"
                      }
                    },
                    "id": 132,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1494:35:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 133,
                  "nodeType": "ExpressionStatement",
                  "src": "1494:35:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 137,
                        "name": "_switch",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 119,
                        "src": "1563:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 134,
                        "name": "_registryContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 83,
                        "src": "1540:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRegistry_$438",
                          "typeString": "contract IRegistry"
                        }
                      },
                      "id": 136,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "kill",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 418,
                      "src": "1540:22:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_bool_$returns$__$",
                        "typeString": "function (bool) external"
                      }
                    },
                    "id": 138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1540:31:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 139,
                  "nodeType": "ExpressionStatement",
                  "src": "1540:31:2"
                }
              ]
            },
            "documentation": "@dev This function allows an admin to freeze the vault and the active\r\n     access control contract, as well as disabling payouts on the \r\n     registry & vault.\r",
            "id": 141,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 122,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 121,
                  "name": "onlyWhitelistAdmin",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 277,
                  "src": "1434:18:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1434:20:2"
              }
            ],
            "name": "systemFreeze",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 120,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 119,
                  "name": "_switch",
                  "nodeType": "VariableDeclaration",
                  "scope": 141,
                  "src": "1413:12:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 118,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1413:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1412:14:2"
            },
            "returnParameters": {
              "id": 123,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1455:0:2"
            },
            "scope": 156,
            "src": "1391:188:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 154,
              "nodeType": "Block",
              "src": "1832:76:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 151,
                        "name": "_newAccessContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 143,
                        "src": "1881:18:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 148,
                        "name": "_registryContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 83,
                        "src": "1843:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRegistry_$438",
                          "typeString": "contract IRegistry"
                        }
                      },
                      "id": 150,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "updateAccessControl",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 413,
                      "src": "1843:37:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 152,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1843:57:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 153,
                  "nodeType": "ExpressionStatement",
                  "src": "1843:57:2"
                }
              ]
            },
            "documentation": "@dev Allows an admin to update the contract used for access control\r\n     and fund rate limiting.\r",
            "id": 155,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 146,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 145,
                  "name": "onlyWhitelistAdmin",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 277,
                  "src": "1806:18:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1806:20:2"
              }
            ],
            "name": "updateAccessContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 144,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 143,
                  "name": "_newAccessContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 155,
                  "src": "1751:26:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 142,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1751:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1750:28:2"
            },
            "returnParameters": {
              "id": 147,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1832:0:2"
            },
            "scope": 156,
            "src": "1721:187:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 157,
        "src": "277:1634:2"
      }
    ],
    "src": "0:1911:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-08-13T16:43:50.285Z",
  "devdoc": {
    "author": "@vonnie610 (GitHub)\r",
    "details": "The Admin contract which controls the contract ecosystem.\r",
    "methods": {
      "init(address,address)": {
        "details": "Sets up the addresses for the vault and registry.\r"
      },
      "systemFreeze(bool)": {
        "details": "This function allows an admin to freeze the vault and the active\r     access control contract, as well as disabling payouts on the \r     registry & vault.\r"
      },
      "updateAccessContract(address)": {
        "details": "Allows an admin to update the contract used for access control\r     and fund rate limiting.\r"
      }
    }
  },
  "userdoc": {
    "methods": {
      "init(address,address)": {
        "notice": "This allows the admin to act as admin over these contracts.\r"
      }
    }
  }
}